{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /* ========================================\
   CONFIGURATION & SETUP\
======================================== */\
// Default Images (Easy to Replace)\
const CAROUSEL_IMAGES = [\
    \{ src: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=500&fit=crop', alt: 'Mountain Lake' \},\
    \{ src: 'https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=400&h=500&fit=crop', alt: 'Forest Path' \},\
    \{ src: 'https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=400&h=500&fit=crop', alt: 'Desert Sunset' \},\
    \{ src: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=500&fit=crop', alt: 'Ocean Waves' \},\
    \{ src: 'https://images.unsplash.com/photo-1518837695005-2083093ee35b?w=400&h=500&fit=crop', alt: 'City Skyline' \},\
    \{ src: 'https://images.unsplash.com/photo-1472214103451-9374bd1c798e?w=400&h=500&fit=crop', alt: 'Tropical Beach' \},\
    \{ src: 'https://images.unsplash.com/photo-1464822759844-d150baec3e5e?w=400&h=500&fit=crop', alt: 'Snow Mountains' \},\
    \{ src: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=500&fit=crop', alt: 'River Valley' \}\
];\
\
// Carousel State\
let carousel = \{\
    currentSlide: 0,\
    totalSlides: 0,\
    autoplayInterval: null,\
    container: null,\
    track: null,\
    slides: [],\
    indicators: [],\
    config: \{\
        slides: 5,\
        autoplay: false,\
        autoplayTimer: 3000,\
        navigation: true,\
        pagination: true,\
        hoverZoom: false,\
        animation: 'default',\
        prevArrow: '\'8b',\
        nextArrow: '\'9b'\
    \}\
\};\
\
/* ========================================\
   INITIALIZATION FUNCTIONS\
======================================== */\
\
function initCarousel() \{\
    readConfiguration();\
    buildCarouselHTML();\
    setupEventListeners();\
    updateDisplay();\
    startAutoplayIfEnabled();\
\}\
\
function readConfiguration() \{\
    carousel.container = document.querySelector('.carousel-container');\
    if (!carousel.container) return;\
\
    const data = carousel.container.dataset;\
    carousel.config = \{\
        slides: parseInt(data.slides) || 5,\
        autoplay: data.autoplay === 'true',\
        autoplayTimer: parseInt(data.autoplayTimer) || 3000,\
        navigation: data.navigation !== 'false',\
        pagination: data.pagination !== 'false',\
        hoverZoom: data.hoverZoom === 'true',\
        animation: data.animation || 'default',\
        prevArrow: data.prevArrow || '\'8b',\
        nextArrow: data.nextArrow || '\'9b'\
    \};\
    \
    carousel.totalSlides = carousel.config.slides;\
\}\
\
/* ========================================\
   HTML BUILDING FUNCTIONS\
======================================== */\
\
function buildCarouselHTML() \{\
    carousel.track = carousel.container.querySelector('.carousel-track');\
    carousel.container.innerHTML = '<div class="carousel-track"></div>';\
    carousel.track = carousel.container.querySelector('.carousel-track');\
    \
    createSlides();\
    createNavigation();\
    createPagination();\
    updateReferences();\
\}\
\
function createSlides() \{\
    for (let i = 0; i < carousel.config.slides; i++) \{\
        const slide = document.createElement('div');\
        slide.className = 'carousel-slide';\
        \
        const img = document.createElement('img');\
        const imageData = CAROUSEL_IMAGES[i % CAROUSEL_IMAGES.length];\
        img.src = imageData.src;\
        img.alt = imageData.alt;\
        \
        slide.appendChild(img);\
        carousel.track.appendChild(slide);\
    \}\
\}\
\
function createNavigation() \{\
    if (!carousel.config.navigation) return;\
    \
    // Previous Button\
    const prevBtn = document.createElement('button');\
    prevBtn.className = 'carousel-nav prev';\
    prevBtn.onclick = () => goToPreviousSlide();\
    \
    if (isImageURL(carousel.config.prevArrow)) \{\
        const img = document.createElement('img');\
        img.src = carousel.config.prevArrow;\
        img.alt = 'Previous';\
        prevBtn.appendChild(img);\
    \} else \{\
        prevBtn.innerHTML = carousel.config.prevArrow;\
    \}\
    \
    // Next Button\
    const nextBtn = document.createElement('button');\
    nextBtn.className = 'carousel-nav next';\
    nextBtn.onclick = () => goToNextSlide();\
    \
    if (isImageURL(carousel.config.nextArrow)) \{\
        const img = document.createElement('img');\
        img.src = carousel.config.nextArrow;\
        img.alt = 'Next';\
        nextBtn.appendChild(img);\
    \} else \{\
        nextBtn.innerHTML = carousel.config.nextArrow;\
    \}\
    \
    carousel.container.appendChild(prevBtn);\
    carousel.container.appendChild(nextBtn);\
\}\
\
function createPagination() \{\
    if (!carousel.config.pagination) return;\
    \
    const indicatorsContainer = document.createElement('div');\
    indicatorsContainer.className = 'carousel-indicators';\
    \
    for (let i = 0; i < carousel.config.slides; i++) \{\
        const indicator = document.createElement('div');\
        indicator.className = 'indicator';\
        if (i === 0) indicator.classList.add('active');\
        indicator.onclick = () => goToSlide(i);\
        indicatorsContainer.appendChild(indicator);\
    \}\
    \
    carousel.container.appendChild(indicatorsContainer);\
\}\
\
function updateReferences() \{\
    carousel.slides = carousel.container.querySelectorAll('.carousel-slide');\
    carousel.indicators = carousel.container.querySelectorAll('.indicator');\
\}\
\
/* ========================================\
   NAVIGATION FUNCTIONS\
======================================== */\
\
function goToNextSlide() \{\
    carousel.currentSlide = (carousel.currentSlide + 1) % carousel.totalSlides;\
    updateDisplay();\
    resetAutoplay();\
\}\
\
function goToPreviousSlide() \{\
    carousel.currentSlide = (carousel.currentSlide - 1 + carousel.totalSlides) % carousel.totalSlides;\
    updateDisplay();\
    resetAutoplay();\
\}\
\
function goToSlide(slideIndex) \{\
    carousel.currentSlide = slideIndex;\
    updateDisplay();\
    resetAutoplay();\
\}\
\
/* ========================================\
   DISPLAY UPDATE FUNCTIONS\
======================================== */\
\
function updateDisplay() \{\
    updateSlidePositions();\
    updateIndicators();\
\}\
\
function updateSlidePositions() \{\
    carousel.slides.forEach((slide, index) => \{\
        slide.classList.remove('center', 'left', 'right', 'hidden');\
        \
        const relativePosition = index - carousel.currentSlide;\
        \
        if (relativePosition === 0) \{\
            slide.classList.add('center');\
        \} else if (relativePosition === -1 || (relativePosition === carousel.totalSlides - 1 && carousel.currentSlide === 0)) \{\
            slide.classList.add('left');\
        \} else if (relativePosition === 1 || (relativePosition === -(carousel.totalSlides - 1) && carousel.currentSlide === carousel.totalSlides - 1)) \{\
            slide.classList.add('right');\
        \} else \{\
            slide.classList.add('hidden');\
        \}\
    \});\
\}\
\
function updateIndicators() \{\
    if (!carousel.config.pagination) return;\
    \
    carousel.indicators.forEach((indicator, index) => \{\
        indicator.classList.toggle('active', index === carousel.currentSlide);\
    \});\
\}\
\
/* ========================================\
   AUTOPLAY FUNCTIONS\
======================================== */\
\
function startAutoplayIfEnabled() \{\
    if (carousel.config.autoplay) \{\
        startAutoplay();\
    \}\
\}\
\
function startAutoplay() \{\
    if (!carousel.config.autoplay) return;\
    \
    carousel.autoplayInterval = setInterval(() => \{\
        goToNextSlide();\
    \}, carousel.config.autoplayTimer);\
\}\
\
function stopAutoplay() \{\
    if (carousel.autoplayInterval) \{\
        clearInterval(carousel.autoplayInterval);\
        carousel.autoplayInterval = null;\
    \}\
\}\
\
function resetAutoplay() \{\
    if (carousel.config.autoplay) \{\
        stopAutoplay();\
        startAutoplay();\
    \}\
\}\
\
/* ========================================\
   EVENT LISTENERS\
======================================== */\
\
function setupEventListeners() \{\
    setupTouchEvents();\
    setupMouseEvents();\
    setupKeyboardEvents();\
    setupAutoplayPause();\
\}\
\
function setupTouchEvents() \{\
    let startX = 0;\
    let isDragging = false;\
\
    carousel.container.addEventListener('touchstart', (e) => \{\
        startX = e.touches[0].clientX;\
        isDragging = true;\
        stopAutoplay();\
    \}, \{ passive: true \});\
\
    carousel.container.addEventListener('touchend', (e) => \{\
        if (!isDragging) return;\
        \
        const endX = e.changedTouches[0].clientX;\
        const deltaX = startX - endX;\
        const swipeThreshold = 50;\
        \
        if (Math.abs(deltaX) > swipeThreshold) \{\
            if (deltaX > 0) \{\
                goToNextSlide();\
            \} else \{\
                goToPreviousSlide();\
            \}\
        \} else if (carousel.config.autoplay) \{\
            startAutoplay();\
        \}\
        \
        isDragging = false;\
    \}, \{ passive: true \});\
\}\
\
function setupMouseEvents() \{\
    let isMouseDown = false;\
    let mouseStartX = 0;\
\
    carousel.container.addEventListener('mousedown', (e) => \{\
        mouseStartX = e.clientX;\
        isMouseDown = true;\
        carousel.container.style.cursor = 'grabbing';\
        stopAutoplay();\
        e.preventDefault();\
    \});\
\
    carousel.container.addEventListener('mouseup', (e) => \{\
        if (!isMouseDown) return;\
        \
        const endX = e.clientX;\
        const deltaX = mouseStartX - endX;\
        const swipeThreshold = 50;\
        \
        carousel.container.style.cursor = '';\
        \
        if (Math.abs(deltaX) > swipeThreshold) \{\
            if (deltaX > 0) \{\
                goToNextSlide();\
            \} else \{\
                goToPreviousSlide();\
            \}\
        \} else if (carousel.config.autoplay) \{\
            startAutoplay();\
        \}\
        \
        isMouseDown = false;\
    \});\
\
    carousel.container.addEventListener('mouseleave', () => \{\
        if (isMouseDown) \{\
            carousel.container.style.cursor = '';\
            isMouseDown = false;\
            if (carousel.config.autoplay) \{\
                startAutoplay();\
            \}\
        \}\
    \});\
\}\
\
function setupKeyboardEvents() \{\
    document.addEventListener('keydown', (e) => \{\
        if (document.activeElement !== document.body) return;\
        if (e.key === 'ArrowRight') \{\
            goToNextSlide();\
        \} else if (e.key === 'ArrowLeft') \{\
            goToPreviousSlide();\
        \}\
    \});\
\}\
\
function setupAutoplayPause() \{\
    carousel.container.addEventListener('mouseenter', () => \{\
        if (carousel.config.autoplay) \{\
            stopAutoplay();\
        \}\
    \});\
\
    carousel.container.addEventListener('mouseleave', () => \{\
        if (carousel.config.autoplay) \{\
            startAutoplay();\
        \}\
    \});\
\}\
\
/* ========================================\
   HELPER FUNCTIONS\
======================================== */\
\
function isImageURL(str) \{\
    return typeof str === 'string' && (str.match(/\\.(jpeg|jpg|gif|png|svg)$/) != null);\
\}\
\
/* ========================================\
   INIT\
======================================== */\
\
document.addEventListener('DOMContentLoaded', () => \{\
    initCarousel();\
\});\
}